module wren;

//------------------------------------------------------------------------------
// wren_vm.h
//------------------------------------------------------------------------------

// The maximum number of temporary objects that can be made visible to the GC
// at one time.
const WREN_MAX_TEMP_ROOTS = 8;

// A handle to a Wren object.
//
// This lets code outside of the VM hold a persistent reference to an object.
// After a handle is acquired, and until it is released, this ensures the
// garbage collector will not reclaim the object it references.
struct WrenHandle
{
    Value value;

    WrenHandle* prev;
    WrenHandle* next;
}

// A single virtual machine for executing Wren code.
//
// Wren has no global state, so all state stored by a running interpreter lives
// here.
struct WrenVM
{
    ObjClass *boolClass;
    ObjClass *classClass;
    ObjClass *fiberClass;
    ObjClass *fnClass;
    ObjClass *listClass;
    ObjClass *mapClass;
    ObjClass *nullClass;
    ObjClass *numClass;
    ObjClass *objectClass;
    ObjClass *rangeClass;
    ObjClass *stringClass;

    // The fiber that is currently running.
    ObjFiber *fiber;

    // The loaded modules. Each key is an ObjString (except for the main module,
    // whose key is null) for the module's name and the value is the ObjModule
    // for the module.
    ObjMap *modules;

    // The most recently imported module. More specifically, the module whose
    // code has most recently finished executing.
    //
    // Not treated like a GC root since the module is already in [modules].
    ObjModule *lastModule;

    // Memory management data:

    // The number of bytes that are known to be currently allocated. Includes all
    // memory that was proven live after the last GC, as well as any new bytes
    // that were allocated since then. Does *not* include bytes for objects that
    // were freed since the last GC.
    usz bytesAllocated;

    // The number of total allocated bytes that will trigger the next GC.
    usz nextGC;

    // The first object in the linked list of all currently allocated objects.
    Obj *first;

    // The "gray" set for the garbage collector. This is the stack of unprocessed
    // objects while a garbage collection pass is in process.
    Obj **gray;
    int grayCount;
    int grayCapacity;

    // The list of temporary roots. This is for temporary or new objects that are
    // not otherwise reachable but should not be collected.
    //
    // They are organized as a stack of pointers stored in this array. This
    // implies that temporary roots need to have stack semantics: only the most
    // recently pushed object can be released.
    Obj *[WREN_MAX_TEMP_ROOTS] tempRoots;
    int numTempRoots;

    // Pointer to the first node in the linked list of active handles or NULL if
    // there are none.
    WrenHandle *handles;

    // Pointer to the bottom of the range of stack slots available for use from
    // the C API. During a foreign method, this will be in the stack of the fiber
    // that is executing a method.
    //
    // If not in a foreign method, this is initially NULL. If the user requests
    // slots by calling wrenEnsureSlots(), a stack is created and this is
    // initialized.
    Value *apiStack;

    WrenConfiguration config;

    // Compiler and debugger data:

    // The compiler that is currently compiling code. This is used so that heap
    // allocated objects used by the compiler can be found if a GC is kicked off
    // in the middle of a compile.
    Compiler *compiler;

    // There is a single global symbol table for all method names on all classes.
    // Method calls are dispatched directly by index in this table.
    SymbolTable methodNames;
}

